import {
  Injectable,
  UnauthorizedException,
  BadRequestException,
} from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { FirebaseService } from '../firebase/firebase.service';
import { GoogleAuthService } from './google-auth.service';
import { JwtService } from './jwt.service';
import { RefreshTokenService } from './refresh-token.service';
import {
  RegisterDto,
  LoginDto,
  GoogleAuthDto,
  AuthResponseDto,
  RefreshTokenResponseDto,
  LogoutResponseDto,
  SendPasswordResetDto,
  ChangePasswordDto,
  ChangePasswordResponseDto,
} from './dto/auth.dto';
import {
  UserAlreadyExistsException,
  UserNotFoundException,
  InvalidRefreshTokenException,
  TokenRefreshFailedException,
  GoogleAuthFailedException,
} from '../common/exceptions/auth.exceptions';

@Injectable()
export class AuthService {
  constructor(
    private prisma: PrismaService,
    private jwtService: JwtService, // Our custom JWT service
    private firebaseService: FirebaseService,
    private googleAuthService: GoogleAuthService,
    private refreshTokenService: RefreshTokenService,
  ) {}

  async register(registerDto: RegisterDto): Promise<AuthResponseDto> {
    const { email, password, nickname } = registerDto;

    // Step 1: Check if user already exists in PostgreSQL
    const existingUser = await this.prisma.user.findUnique({
      where: { email },
    });

    if (existingUser) {
      throw new UserAlreadyExistsException(email);
    }

    try {
      // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firebase
      const displayName = nickname || undefined;
      const firebaseUid = await this.firebaseService.createUser(
        email,
        password,
        displayName,
      );

      // –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PostgreSQL —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ Firebase
      // –ü–∞—Ä–æ–ª—å –ù–ï —Ö—Ä–∞–Ω–∏–º –≤ PostgreSQL - —Ç–æ–ª—å–∫–æ –≤ Firebase
      const user = await this.prisma.user.create({
        data: {
          email,
          nickname,
          firebaseUid, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ Firebase UID
          // password –æ—Å—Ç–∞–µ—Ç—Å—è null - –Ω–µ —Ö—Ä–∞–Ω–∏–º –ø–∞—Ä–æ–ª–∏ –≤ PostgreSQL
        },
      });

      console.log(`‚úÖ User created in PostgreSQL with ID: ${user.id}`);

      // Step 5: Generate tokens (access + refresh)
      const payload = { email: user.email, sub: user.id };
      const accessToken = this.jwtService.generateAccessToken(payload);

      // Create refresh token
      const { token: refreshToken } =
        await this.refreshTokenService.createRefreshToken({
          userId: user.id,
          email: user.email,
        });

      return {
        access_token: accessToken,
        refresh_token: refreshToken,
        user: {
          id: user.id,
          email: user.email,
          nickname: user.nickname ?? undefined,
          googleId: user.googleId ?? undefined,
        },
      };
    } catch (error) {
      // If something went wrong, log the error
      console.error('‚ùå Error creating user:', error);

      // If user was created in Firebase but not in PostgreSQL, delete from Firebase
      if (error instanceof Error && error.message.includes('PostgreSQL')) {
        try {
          // Here we would delete from Firebase if we had the UID
          console.log('üîÑ Attempting to cleanup Firebase user...');
        } catch (deleteError) {
          console.error('‚ùå Failed to delete user from Firebase:', deleteError);
        }
      }

      throw error;
    }
  }

  async login(loginDto: LoginDto): Promise<AuthResponseDto> {
    const { email, password } = loginDto;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –≤ Firebase
    const firebaseUser = await this.firebaseService.verifyPasswordAndGetUser(
      email,
      password,
    );
    if (!firebaseUser) {
      throw new UnauthorizedException('Invalid credentials');
    }

    // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PostgreSQL
    let user = await this.prisma.user.findUnique({
      where: { email },
    });

    if (!user) {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PostgreSQL, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      user = await this.prisma.user.create({
        data: {
          email,
          firebaseUid: firebaseUser.uid,
          // password –æ—Å—Ç–∞–µ—Ç—Å—è null - –Ω–µ —Ö—Ä–∞–Ω–∏–º –ø–∞—Ä–æ–ª–∏ –≤ PostgreSQL
        },
      });
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ PostgreSQL: ${user.email}`);
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º Firebase UID, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!user.firebaseUid) {
        user = await this.prisma.user.update({
          where: { id: user.id },
          data: { firebaseUid: firebaseUser.uid },
        });
        console.log(`‚úÖ Firebase UID –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`);
      }
    }

    // Generate tokens (access + refresh)
    const payload = { email: user.email, sub: user.id };
    const accessToken = this.jwtService.generateAccessToken(payload);

    // Create refresh token
    const { token: refreshToken } =
      await this.refreshTokenService.createRefreshToken({
        userId: user.id,
        email: user.email,
      });

    return {
      access_token: accessToken,
      refresh_token: refreshToken,
      user: {
        id: user.id,
        email: user.email,
        nickname: user.nickname ?? undefined,
        googleId: user.googleId ?? undefined,
      },
    };
  }

  async validateUser(userId: string) {
    const user = await this.prisma.user.findUnique({
      where: { id: userId },
    });
    return user;
  }

  async googleAuth(googleAuthDto: GoogleAuthDto): Promise<AuthResponseDto> {
    const { credential } = googleAuthDto;

    try {
      // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º Google —Ç–æ–∫–µ–Ω
      const googleUser =
        await this.googleAuthService.verifyGoogleToken(credential);

      console.log('‚úÖ Google user verified:', {
        email: googleUser.email,
        nickname: googleUser.nickname,
      });

      // Step 2: Check if user exists in our database
      let user = await this.prisma.user.findFirst({
        where: {
          OR: [{ email: googleUser.email }, { googleId: googleUser.googleId }],
        },
      });

      if (user) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        user = await this.prisma.user.update({
          where: { id: user.id },
          data: {
            googleId: googleUser.googleId,
            nickname: user.nickname ?? undefined, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π nickname
            avatar: googleUser.avatar ?? user.avatar ?? undefined,
          },
        });
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let firebaseUid: string | null = null;

        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Firebase
          const firebaseUserExists = await this.firebaseService.userExists(
            googleUser.email,
          );

          if (!firebaseUserExists) {
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firebase –±–µ–∑ –ø–∞—Ä–æ–ª—è (—Ç–æ–ª—å–∫–æ email)
            firebaseUid = await this.firebaseService.createUserWithoutPassword(
              googleUser.email,
              googleUser.nickname,
              googleUser.avatar,
            );

            console.log(
              `‚úÖ Google –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ Firebase —Å UID: ${firebaseUid}`,
            );
          } else {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Firebase, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ UID
            const existingFirebaseUser =
              await this.firebaseService.getUserByEmail(googleUser.email);
            firebaseUid = existingFirebaseUser?.uid || null;
            console.log(
              `‚úÖ Google –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Firebase —Å UID: ${firebaseUid}`,
            );
          }
        } catch (firebaseError) {
          console.warn(
            '‚ö†Ô∏è Failed to create Google user in Firebase:',
            firebaseError,
          );
          // Continue without Firebase
        }

        user = await this.prisma.user.create({
          data: {
            email: googleUser.email,
            googleId: googleUser.googleId,
            nickname: googleUser.nickname,
            avatar: googleUser.avatar,
            firebaseUid, // Link to Firebase UID if successful
            // password remains null for Google users
          },
        });

        console.log(
          `‚úÖ Google –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ PostgreSQL —Å ID: ${user.id}`,
        );
      }

      // Generate tokens (access + refresh)
      const payload = { email: user.email, sub: user.id };
      const accessToken = this.jwtService.generateAccessToken(payload);

      // Create refresh token
      const { token: refreshToken } =
        await this.refreshTokenService.createRefreshToken({
          userId: user.id,
          email: user.email,
        });

      return {
        access_token: accessToken,
        refresh_token: refreshToken,
        user: {
          id: user.id,
          email: user.email,
          nickname: user.nickname ?? undefined,
          avatar: user.avatar ?? undefined,
          googleId: user.googleId ?? undefined,
        },
      };
    } catch (error) {
      console.error('‚ùå Error during Google authentication:', error);
      throw new GoogleAuthFailedException();
    }
  }

  // Refresh token method
  async refreshToken(refreshToken: string): Promise<RefreshTokenResponseDto> {
    try {
      // Validate the refresh token
      const validation =
        await this.refreshTokenService.validateRefreshToken(refreshToken);

      if (!validation.isValid || !validation.refreshToken) {
        throw new InvalidRefreshTokenException();
      }

      // Get user data
      const user = await this.validateUser(validation.userId!);
      if (!user) {
        throw new UserNotFoundException();
      }

      // Create new access token
      const payload = { email: user.email, sub: user.id };
      const newAccessToken = this.jwtService.generateAccessToken(payload);

      // Create new refresh token and revoke old one
      await this.refreshTokenService.revokeRefreshToken(
        validation.refreshToken.id,
      );

      const { token: newRefreshToken } =
        await this.refreshTokenService.createRefreshToken({
          userId: user.id,
          email: user.email,
        });

      return {
        access_token: newAccessToken,
        refresh_token: newRefreshToken,
      };
    } catch (error) {
      console.error('‚ùå Error refreshing token:', error);
      throw new TokenRefreshFailedException();
    }
  }

  // Logout method - revoke refresh token
  async logout(refreshToken: string): Promise<LogoutResponseDto> {
    try {
      // Validate and revoke the refresh token
      const validation =
        await this.refreshTokenService.validateRefreshToken(refreshToken);

      if (validation.isValid && validation.refreshToken) {
        await this.refreshTokenService.revokeRefreshToken(
          validation.refreshToken.id,
        );
      }

      return { message: 'Logged out successfully' };
    } catch (error) {
      console.error('‚ùå Error during logout:', error);
      // Even if there's an error, we consider logout successful
      // to prevent information leakage
      return { message: 'Logged out successfully' };
    }
  }

  async sendPasswordReset(
    sendPasswordResetDto: SendPasswordResetDto,
  ): Promise<{ message: string }> {
    const { email } = sendPasswordResetDto;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ PostgreSQL
    const user = await this.prisma.user.findUnique({
      where: { email },
    });

    if (!user) {
      // –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
      return {
        message:
          'If a user with this email exists, a password reset email has been sent',
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å (–Ω–µ Google-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    if (!user.password) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Google-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      if (user.googleId) {
        return {
          message:
            'Google users cannot reset their password. Please use Google to sign in.',
        };
      }
      return {
        message:
          'If a user with this email exists, a password reset email has been sent',
      };
    }

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ Firebase
      await this.firebaseService.sendPasswordResetEmail(email);

      return {
        message: 'Password reset email has been sent to your email address',
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      return {
        message:
          'If a user with this email exists, a password reset email has been sent',
      };
    }
  }

  async changePassword(
    userId: string,
    changePasswordDto: ChangePasswordDto,
  ): Promise<ChangePasswordResponseDto> {
    const { currentPassword, newPassword } = changePasswordDto;

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.prisma.user.findUnique({
      where: { id: userId },
    });

    if (!user) {
      throw new UnauthorizedException('User not found');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å Firebase UID
    if (!user.firebaseUid) {
      throw new BadRequestException('User not linked to Firebase');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –≤ Firebase
    const isCurrentPasswordValid = await this.firebaseService.verifyPassword(
      user.email,
      currentPassword,
    );
    if (!isCurrentPasswordValid) {
      throw new UnauthorizedException('Current password is incorrect');
    }

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –≤ Firebase
      await this.firebaseService.updateUserPassword(
        user.firebaseUid,
        newPassword,
      );
      console.log(
        `‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Firebase –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`,
      );

      return { message: 'Password changed successfully' };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è:', error);
      throw new BadRequestException('Failed to change password');
    }
  }
}
